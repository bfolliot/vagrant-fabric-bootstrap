# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
def symbolize_keys(hash)
  hash.inject({}){|result, (key, value)|
    new_key = case key
              when String then key.to_sym
              else key
              end
    new_value = case value
                when Hash then symbolize_keys(value)
                else value
                end
    result[new_key] = new_value
    result
  }
end
settings = YAML::load_file "vagrant.yml"
settings = symbolize_keys(settings)
Vagrant.configure("2") do |config|
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true
  settings.each do |name, cfg|
    config.vm.define name do |vm_config|
      vm_config.vbguest.auto_update = false

      vm_config.vbguest.no_remote = false
      vm_config.vbguest.auto_reboot = true

      vm_config.vm.box = cfg[:box] if cfg[:box]

      vm_config.vm.box_url = cfg[:url] if cfg[:url]

      vm_config.vm.hostname = cfg[:hostname] if cfg[:hostname]


      vm_config.hostmanager.aliases = cfg[:host_aliases] if cfg[:host_aliases]

      vm_config.vm.network :private_network, ip: cfg[:ip] if cfg[:ip]
      vm_config.vm.network "public_network" if cfg[:public_network]


      vm_config.vm.provider :virtualbox do |v|
        if cfg[:ram]
          v.customize ["modifyvm", :id, "--memory", cfg[:ram] ]
        end

        # This setting makes it so that network access from inside the vagrant guest
        # is able to resolve DNS using the hosts VPN connection.
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]

        # This option lets the real-time clock (RTC) operate in UTC time (see the section called “"Motherboard" tab”).
         v.customize ["modifyvm", :id, "--rtcuseutc", "on"]
      end 

      if cfg[:share_folders]
        cfg[:share_folders].each do |sf_name, sf|
          vm_config.vm.synced_folder sf[:host_path], sf[:guest_path]
        end
      end

      if cfg[:fabric]
        vm_config.vm.provision :fabric do |fab|
          fab.fabfile_path = cfg[:fabric][:path] if cfg[:fabric][:path]
          fab.tasks = ["vagrant"]
          cfg[:fabric][:tasks].each do |task|
            fab.tasks.push(task)
          end
        end
      end

      vm_config.vm.provision :hostmanager
    end
  end
end
